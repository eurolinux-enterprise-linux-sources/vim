diff -up vim74/runtime/syntax/cpp.vim.c++11 vim74/runtime/syntax/cpp.vim
--- vim74/runtime/syntax/cpp.vim.c++11	2017-08-23 17:49:00.722250142 +0200
+++ vim74/runtime/syntax/cpp.vim	2017-08-23 17:49:29.132979711 +0200
@@ -1,29 +1,23 @@
 " Vim syntax file
 " Language:	C++
-" Current Maintainer:	vim-jp (https://github.com/vim-jp/cpp-vim)
+" Current Maintainer:	vim-jp (https://github.com/vim-jp/vim-cpp)
 " Previous Maintainer:	Ken Shan <ccshan@post.harvard.edu>
-" Last Change:	2012 Jun 14
+" Last Change:	2017 Jun 05
 
-" For version 5.x: Clear all syntax items
-" For version 6.x: Quit when a syntax file was already loaded
-if version < 600
-  syntax clear
-elseif exists("b:current_syntax")
+" quit when a syntax file was already loaded
+if exists("b:current_syntax")
   finish
 endif
 
 " Read the C syntax to start with
-if version < 600
-  so <sfile>:p:h/c.vim
-else
-  runtime! syntax/c.vim
-  unlet b:current_syntax
-endif
+runtime! syntax/c.vim
+unlet b:current_syntax
 
 " C++ extensions
 syn keyword cppStatement	new delete this friend using
 syn keyword cppAccess		public protected private
-syn keyword cppType		inline virtual explicit export bool wchar_t
+syn keyword cppModifier		inline virtual explicit export
+syn keyword cppType		bool wchar_t
 syn keyword cppExceptions	throw try catch
 syn keyword cppOperator		operator typeid
 syn keyword cppOperator		and bitor or xor compl bitand and_eq or_eq xor_eq not not_eq
@@ -32,38 +26,51 @@ syn match cppCast		"\<\(const\|static\|d
 syn keyword cppStorageClass	mutable
 syn keyword cppStructure	class typename template namespace
 syn keyword cppBoolean		true false
+syn keyword cppConstant		__cplusplus
 
 " C++ 11 extensions
 if !exists("cpp_no_cpp11")
-  syn keyword cppType		override final
+  syn keyword cppModifier	override final
+  syn keyword cppType		nullptr_t auto
   syn keyword cppExceptions	noexcept
-  syn keyword cppStorageClass	constexpr decltype
+  syn keyword cppStorageClass	constexpr decltype thread_local
   syn keyword cppConstant	nullptr
+  syn keyword cppConstant	ATOMIC_FLAG_INIT ATOMIC_VAR_INIT
+  syn keyword cppConstant	ATOMIC_BOOL_LOCK_FREE ATOMIC_CHAR_LOCK_FREE
+  syn keyword cppConstant	ATOMIC_CHAR16_T_LOCK_FREE ATOMIC_CHAR32_T_LOCK_FREE
+  syn keyword cppConstant	ATOMIC_WCHAR_T_LOCK_FREE ATOMIC_SHORT_LOCK_FREE
+  syn keyword cppConstant	ATOMIC_INT_LOCK_FREE ATOMIC_LONG_LOCK_FREE
+  syn keyword cppConstant	ATOMIC_LLONG_LOCK_FREE ATOMIC_POINTER_LOCK_FREE
+  syn region cppRawString	matchgroup=cppRawStringDelimiter start=+\%(u8\|[uLU]\)\=R"\z([[:alnum:]_{}[\]#<>%:;.?*\+\-/\^&|~!=,"']\{,16}\)(+ end=+)\z1"+ contains=@Spell
+endif
+
+" C++ 14 extensions
+if !exists("cpp_no_cpp14")
+  syn case ignore
+  syn match cppNumber		display "\<0b[01]\('\=[01]\+\)*\(u\=l\{0,2}\|ll\=u\)\>"
+  syn match cppNumber		display "\<[1-9]\('\=\d\+\)*\(u\=l\{0,2}\|ll\=u\)\>" contains=cFloat
+  syn match cppNumber		display "\<0x\x\('\=\x\+\)*\(u\=l\{0,2}\|ll\=u\)\>"
+  syn case match
 endif
 
 " The minimum and maximum operators in GNU C++
 syn match cppMinMax "[<>]?"
 
 " Default highlighting
-if version >= 508 || !exists("did_cpp_syntax_inits")
-  if version < 508
-    let did_cpp_syntax_inits = 1
-    command -nargs=+ HiLink hi link <args>
-  else
-    command -nargs=+ HiLink hi def link <args>
-  endif
-  HiLink cppAccess		cppStatement
-  HiLink cppCast		cppStatement
-  HiLink cppExceptions		Exception
-  HiLink cppOperator		Operator
-  HiLink cppStatement		Statement
-  HiLink cppType		Type
-  HiLink cppStorageClass	StorageClass
-  HiLink cppStructure		Structure
-  HiLink cppBoolean		Boolean
-  HiLink cppConstant		Constant
-  delcommand HiLink
-endif
+hi def link cppAccess		cppStatement
+hi def link cppCast		cppStatement
+hi def link cppExceptions		Exception
+hi def link cppOperator		Operator
+hi def link cppStatement		Statement
+hi def link cppModifier		Type
+hi def link cppType		Type
+hi def link cppStorageClass	StorageClass
+hi def link cppStructure		Structure
+hi def link cppBoolean		Boolean
+hi def link cppConstant		Constant
+hi def link cppRawStringDelimiter	Delimiter
+hi def link cppRawString		String
+hi def link cppNumber		Number
 
 let b:current_syntax = "cpp"
 
